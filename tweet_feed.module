<?php
/**
 * @file
 * Code for the Tweet Feed feature.
 */

include_once 'tweet_feed.features.inc';

define('QUERY_SEARCH', 1);
define('QUERY_TIMELINE', 2);
define('QUERY_LIST', 3);

/**
 * Implements hook_menu
 */
function tweet_feed_menu() {
  $items = array();
  $items['admin/config/services/tweet_feed'] = array(
    'title' => t('Tweet Feed'),
    'description' => t('The settings for the Tweet Feed module'),
    'page callback' => 'tweet_feed_accounts_table',
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/tweet_feed/accounts'] = array(
    'title' => t('Twitter API Accounts'),
    'description' => t('List of available API accounts used to collect feeds.'),
    'page callback' => 'tweet_feed_accounts_table',
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/tweet_feed/accounts/add'] = array(
    'title' => t('Add Account'),
    'description' => t('Add a new Twitter API account..'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tweet_feed_account_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/services/tweet_feed/accounts/edit/%tweet_feed_id'] = array(
    'title' => t('Add Account'),
    'description' => t('Add a new Twitter API account..'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tweet_feed_account_form', 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/tweet_feed/accounts/delete/%tweet_feed_id'] = array(
    'title' => t('Add Account'),
    'description' => t('Add a new Twitter API account..'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tweet_feed_account_form', 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/tweet_feed/feeds'] = array(
    'title' => t('Twitter Feeds'),
    'description' => t('List of configured feeds to aggregate.'),
    'page callback' => 'tweet_feed_feeds_table',
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/tweet_feed/feeds/add'] = array(
    'title' => t('Add Feed'),
    'description' => t('Add a new feed to the list of aggregated feeds.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tweet_feed_feeds_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/services/tweet_feed/feeds/edit/%tweet_feed_id'] = array(
    'title' => t('Edit Feed'),
    'description' => t('Edit one of the listed feeds.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tweet_feed_feeds_form', 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/services/tweet_feed/feeds/delete/%tweet_feed_id'] = array(
    'title' => t('Delete Feed'),
    'description' => t('Add a new feed to the list of aggregated feeds.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tweet_feed_feeds_form', 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer tweet feed settings'),
    'file' => 'tweet_feed_admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_load
 */
function tweet_feed_id_load($value) {
  return (intval($value)) ? $value : FALSE;
}

/**
 * Implements hook_permission
 */
function tweet_feed_permission() {
  return array(
    'administer tweet feed settings' => array(
      'title' => t('Access Tweet Feed Settings'),
      'description' => t('Allow the changing of OAuth tokens and search queries.'),
    ),
  );
}

/**
 * Implements hook_cron
 */
function tweet_feed_cron() {
  tweet_feed_process_all_feeds();
}

function tweet_feed_process_all_feeds() {
  // load in the fid's for active feeds and then run them through 
  // tweet_feed_pull_data_from_feed
  $result = db_query('SELECT fid FROM tweet_feeds WHERE 1 ORDER BY feed_name');
  while ($fdata = $result->fetchObject()) {
    tweet_feed_pull_data_from_feed($tdata->fid);
  }
}

function tweet_feed_get_feed_object($fid) {
  // We should only ever have one of these since we're pulling by feed and a feed can only
  // have only one API source.
  $result = db_query('SELECT f.fid, f.query_type, f.timeline_id, f.search_term, f.list_name, 
                             f.pull_count, f.clear_prior, f.new_window, a.consumer_key,
                             a.consumer_secret, a.oauth_token, a.oauth_token_secret
                      FROM {tweet_feeds} f, {tweed_accounts} a
                      WHERE f.fid = :fid
                        AND a.aid = f.aid',array(':fid' => $fid));
  $feed = $result->fetchObject(); 
  return $feed;
}


function tweet_feed_pull_data_from_feed($fid) {
  
  // If the fid is empty then we do not have enough information by which to pull data.
  // When this is the case, we need to bail.
  if (empty($fid)) {
    return FALSE;
  }

  $feed = tweet_feed_get_feed_object($fid);

  // Load in our twitter oauth class
  module_load_include('inc', 'tweet_feed', 'inc/twitter-oauth');

  // If we have selected to clear our prior tweets for this particular feed, then we need
  // to do that here.
  if (!empty($feed->clear_prior)) {
    // All tweets are nodes, so we do an entity query to get the node id's for the tweets
    // belonging to this feed and delete them. It's conceivable that this could take some
    // time.
    db_delete('tweet_feeds')
      ->condition('fid', $fid, '=')
      ->execute();
  }
  
  // Build TwitterOAuth object with client credentials 
  $con = new TwitterOAuth($feed->consumer_key, $feed->comsumer_secret, $feed->oauth_token, $feed->oauth_token_secret);

  // Get the number of tweets to pull from our list 
  $number_to_get = $feed->pull_count;

  $current_count = 0;
  $tweets = array();
  $params = ($feed->query_type == 'timeline') ?
    array('user_id' => $feed->timeline_id, 'count' => 100) :
    array('q' => $feed->search_term, 'count' => 100);
        
  while(count($tweets) <= $number_to_get) {
    if (!empty($tdata->search_metadata->next_results)) {
      $next = substr($tdata->search_metadata->next_results, 1);
      $parts = explode('&', $next);
      foreach($parts as $part) {
        list($key, $value) = explode('=', $part);
        if ($key == 'max_id') {
          $value = $lowest_id;
        }
        $params[$key] = $value;
      }
    }

    switch ($feed->query_type) {
      case 'timeline':
        $tdata = json_decode($con->oAuthRequest('https://api.twitter.com/1.1/statuses/user_timeline.json', 'GET', $params));
        break;
      
      case 'list':
        $tdata = json_decode(
          $con->oAuthRequest(
            'https://api.twitter.com/1.1/lists/statuses.json',
            'GET',
            array(
              'slug' => $feed->list_name,
              'owner_id' => $feed->timeline_id,
              'count' => $feed->pull_count,
            )
          )
        );
        break;
      
      case 'search':
      default:
        $tdata = json_decode(
          $con->oAuthRequest('https://api.twitter.com/1.1/search/tweets.json',
          'GET', array('q' => $feed->search_term, 'count' => $feed->pull_count))
        );
        break;
    }

    print "<pre>";
    print_r($tdata);
    exit();


    if (!empty($tdata) && !empty($tdata->statuses)) {    
      $data = tweet_feed_process_tweets($tdata->statuses);
    
      // If this is FALSE, then we have hit an error and need to stop processing
      if ($data['tweets'] === FALSE) {
        break;
      }
    
      // merge the total tweets so we know how many we have
      $tweets = array_merge($data['tweets'], $tweets);
      $lowest_id = $data['lowest_id'];
    }
    else {
      break;
    }
  }
}

